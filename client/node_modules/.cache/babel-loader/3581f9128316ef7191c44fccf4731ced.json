{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan\\\\Desktop\\\\SAE\\\\2eme\\\\nodejs\\\\cryptocheck\\\\client\\\\src\\\\components\\\\ListCrypto.js\";\nimport React, { useEffect, useState } from 'react';\nimport { List, Avatar } from 'antd'; //const dataAssetsTmp = [];\n//const dataAssetsLogoTmp = [];\n\nconst dataAssets5Tmp = [];\nconst dataAssetsLogo5Tmp = [];\nvar dataAssets5 = [];\n\nconst https = require('https'); //fonction pour fusionner deux tableaux d'objets avec une clé similaire\n\n\nfunction mergeArrayObjects(arr1, arr2) {\n  return arr1.map((item, i) => {\n    if (item.id === arr2[i].id) {\n      //fusionne deux objets\n      return Object.assign({}, item, arr2[i]);\n    }\n  });\n} //recuperer toutes les info crypto\n\n\nvar optionsAssets = {\n  \"method\": \"GET\",\n  \"hostname\": \"rest.coinapi.io\",\n  \"path\": \"/v1/assets\",\n  \"headers\": {\n    'X-CoinAPI-Key': 'F9065291-99B7-44B7-9F3C-4C02D0131B28'\n  }\n};\nvar requestAssets = https.request(optionsAssets, function (response) {\n  var chunks = [];\n  response.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n  let urlAssets = response._fetchResponse.url;\n  fetch(urlAssets).then(res => res.json()).then(out => {\n    for (var i = 0; i < out.length; i++) {\n      if (out[i].asset_id === 'BTC' || out[i].asset_id === 'ETH' || out[i].asset_id === 'USDT' || out[i].asset_id === 'XRP' || out[i].asset_id === 'BCH') {\n        dataAssets5Tmp.push(out[i]);\n      } //dataAssetsTmp.push(out[i]);\n\n    }\n  }).catch(err => {\n    throw err;\n  });\n});\nrequestAssets.end(); //recuperer toutes les logo crypto\n\nvar optionsAssetsLogo = {\n  \"method\": \"GET\",\n  \"hostname\": \"rest.coinapi.io\",\n  \"path\": \"/v1/assets/icons/{12px}\",\n  \"headers\": {\n    'X-CoinAPI-Key': 'F9065291-99B7-44B7-9F3C-4C02D0131B28'\n  }\n};\nvar requestAssetsLogo = https.request(optionsAssetsLogo, function (response) {\n  var chunks = [];\n  response.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n  let urlAssetsLogo = response._fetchResponse.url;\n  fetch(urlAssetsLogo).then(res => res.json()).then(out => {\n    for (var i = 0; i < out.length; i++) {\n      if (out[i].asset_id === 'BTC' || out[i].asset_id === 'ETH' || out[i].asset_id === 'USDT' || out[i].asset_id === 'XRP' || out[i].asset_id === 'BCH') {\n        dataAssetsLogo5Tmp.push(out[i]);\n      } //\tdataAssetsLogoTmp.push(out[i]);\n\n    }\n  }).catch(err => {\n    throw err;\n  });\n});\nrequestAssetsLogo.end();\n\nconst ListCrypto = () => {\n  const [dataAssets, setDataAssets] = useState([]);\n  useEffect(() => {\n    dataAssets5Tmp.sort((a, b) => a.asset_id > b.asset_id ? 1 : -1);\n    dataAssetsLogo5Tmp.sort((a, b) => a.asset_id > b.asset_id ? 1 : -1);\n    dataAssets5 = mergeArrayObjects(dataAssets5Tmp, dataAssetsLogo5Tmp);\n    dataAssets5.sort((a, b) => a.name > b.name ? 1 : -1);\n    setDataAssets(dataAssets5);\n    console.log(dataAssets5);\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(List, {\n    itemLayout: \"horizontal\",\n    dataSource: dataAssets,\n    renderItem: item => React.createElement(List.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(List.Item.Meta, {\n      avatar: React.createElement(Avatar, {\n        src: item.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }),\n      title: React.createElement(\"a\", {\n        href: '/c=' + item.asset_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, item.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), \",\");\n};\n\nexport default ListCrypto;","map":{"version":3,"sources":["C:/Users/Dylan/Desktop/SAE/2eme/nodejs/cryptocheck/client/src/components/ListCrypto.js"],"names":["React","useEffect","useState","List","Avatar","dataAssets5Tmp","dataAssetsLogo5Tmp","dataAssets5","https","require","mergeArrayObjects","arr1","arr2","map","item","i","id","Object","assign","optionsAssets","requestAssets","request","response","chunks","on","chunk","push","urlAssets","_fetchResponse","url","fetch","then","res","json","out","length","asset_id","catch","err","end","optionsAssetsLogo","requestAssetsLogo","urlAssetsLogo","ListCrypto","dataAssets","setDataAssets","sort","a","b","name","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {List, Avatar} from 'antd';\r\n//const dataAssetsTmp = [];\r\n//const dataAssetsLogoTmp = [];\r\nconst dataAssets5Tmp = [];\r\nconst dataAssetsLogo5Tmp = [];\r\nvar dataAssets5 = [];\r\nconst https = require('https');\r\n\r\n//fonction pour fusionner deux tableaux d'objets avec une clé similaire\r\nfunction mergeArrayObjects(arr1, arr2) {\r\n\treturn arr1.map((item, i) => {\r\n\t\tif (item.id === arr2[i].id) {\r\n\t\t\t//fusionne deux objets\r\n\t\t\treturn Object.assign({}, item, arr2[i])\r\n\t\t}\r\n\t})\r\n}\r\n\r\n//recuperer toutes les info crypto\r\nvar optionsAssets = {\r\n\t\"method\": \"GET\",\r\n\t\"hostname\": \"rest.coinapi.io\",\r\n\t\"path\": \"/v1/assets\",\r\n\t\"headers\": {'X-CoinAPI-Key': 'F9065291-99B7-44B7-9F3C-4C02D0131B28'}\r\n};\r\n\r\nvar requestAssets = https.request(optionsAssets, function (response) {\r\n\tvar chunks = [];\r\n\tresponse.on(\"data\", function (chunk) {\r\n\t\tchunks.push(chunk);\r\n\t});\r\n\tlet urlAssets = response._fetchResponse.url;\r\n\tfetch(urlAssets)\r\n\t\t.then(res => res.json())\r\n\t\t.then((out) => {\r\n\t\t\tfor (var i = 0; i < out.length; i++) {\r\n\t\t\t\tif ((out[i].asset_id === 'BTC') || (out[i].asset_id === 'ETH') || (out[i].asset_id === 'USDT') || (out[i].asset_id === 'XRP') || (out[i].asset_id === 'BCH')) {\r\n\t\t\t\t\tdataAssets5Tmp.push(out[i]);\r\n\t\t\t\t}\r\n\t\t\t\t//dataAssetsTmp.push(out[i]);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tthrow err\r\n\t\t});\r\n});\r\n\r\nrequestAssets.end();\r\n\r\n\r\n//recuperer toutes les logo crypto\r\nvar optionsAssetsLogo = {\r\n\t\"method\": \"GET\",\r\n\t\"hostname\": \"rest.coinapi.io\",\r\n\t\"path\": \"/v1/assets/icons/{12px}\",\r\n\t\"headers\": {'X-CoinAPI-Key': 'F9065291-99B7-44B7-9F3C-4C02D0131B28'}\r\n};\r\n\r\nvar requestAssetsLogo = https.request(optionsAssetsLogo, function (response) {\r\n\tvar chunks = [];\r\n\tresponse.on(\"data\", function (chunk) {\r\n\t\tchunks.push(chunk);\r\n\t});\r\n\r\n\tlet urlAssetsLogo = response._fetchResponse.url;\r\n\r\n\r\n\tfetch(urlAssetsLogo)\r\n\t\t.then(res => res.json())\r\n\t\t.then((out) => {\r\n\r\n\t\t\tfor (var i = 0; i < out.length; i++) {\r\n\t\t\t\tif ((out[i].asset_id === 'BTC') || (out[i].asset_id === 'ETH') || (out[i].asset_id === 'USDT') ||\r\n\t\t\t\t\t(out[i].asset_id === 'XRP') || (out[i].asset_id === 'BCH')) {\r\n\t\t\t\t\tdataAssetsLogo5Tmp.push(out[i]);\r\n\t\t\t\t}\r\n\t\t\t\t//\tdataAssetsLogoTmp.push(out[i]);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tthrow err\r\n\t\t});\r\n});\r\nrequestAssetsLogo.end();\r\n\r\n\r\nconst ListCrypto = () => {\r\n\tconst [dataAssets, setDataAssets] = useState([]);\r\n\tuseEffect(() => {\r\n\r\n\t\tdataAssets5Tmp.sort((a, b) => (a.asset_id > b.asset_id) ? 1 : -1);\r\n\t\tdataAssetsLogo5Tmp.sort((a, b) => (a.asset_id > b.asset_id) ? 1 : -1);\r\n\t\tdataAssets5 = (mergeArrayObjects(dataAssets5Tmp, dataAssetsLogo5Tmp));\r\n\t\tdataAssets5.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n\t\tsetDataAssets(dataAssets5);\r\n\t\tconsole.log(dataAssets5);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\r\n\t\t\t<List\r\n\t\t\t\titemLayout=\"horizontal\"\r\n\t\t\t\tdataSource={dataAssets}\r\n\t\t\t\trenderItem={item => (\r\n\r\n\t\t\t\t\t<List.Item>\r\n\t\t\t\t\t\t<List.Item.Meta\r\n\t\t\t\t\t\t\tavatar={<Avatar src={item.url}/>}\r\n\t\t\t\t\t\t\ttitle={<a href={'/c=' + item.asset_id}>{item.name}</a>}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t</List.Item>\r\n\t\t\t\t)}\r\n\t\t\t/>,\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default ListCrypto;"]},"metadata":{},"sourceType":"module"}