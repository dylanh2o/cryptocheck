{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; //const dataAssetsTmp = [];\n//const dataAssetsLogoTmp = [];\n\nconst dataAssets5Tmp = [];\nconst dataAssetsLogo5Tmp = [];\nvar dataAssets5 = [];\n\nconst https = require('https');\n\nexport const fetchInfoCurrency = createAsyncThunk('home/fetchCurrency', async () => {\n  //recuperer toutes les info crypto\n  const request = await fetch('https://rest.coinapi.io/v1/assets', {\n    method: 'GET',\n    headers: {\n      'X-CoinAPI-Key': 'F9065291-99B7-44B7-9F3C-4C02D0131B28'\n    }\n  });\n\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].asset_id === 'BTC' || data[i].asset_id === 'ETH' || data[i].asset_id === 'USDT' || data[i].asset_id === 'XRP' || data[i].asset_id === 'BCH') {\n      dataAssets5Tmp.push(data[i]);\n    }\n\n    return dataAssets5Tmp;\n  }\n\n  ;\n  const data = await request.json();\n  return data;\n});\nexport const currencySlice = createSlice({\n  name: 'currency',\n  initialState: {\n    state: 'loading',\n    error: null,\n    currency: []\n  },\n  reducers: {\n    hydrateCurrency: (state, action) => {\n      state.currency = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchInfoCurrency.pending]: (state, action) => {\n      if (state.state !== 'loading') {\n        state.state = 'loading';\n      }\n    },\n    [fetchInfoCurrency.fulfilled]: (state, action) => {\n      if (state.state === 'loading') {\n        state.state = 'ready';\n        state.currency = action.payload;\n      }\n    },\n    [fetchInfoCurrency.rejected]: (state, action) => {\n      if (state.state === 'loading') {\n        state.state = 'error';\n        state.error = action.error.message;\n      }\n    }\n  }\n});\nexport const getHomeCurrency = state => state.currency.currency;\nexport const {\n  hydrateCurrency\n} = currencySlice.actions;\nexport default currencySlice.reducer;","map":{"version":3,"sources":["C:/Users/Dylan/Desktop/SAE/2eme/nodejs/cryptocheck/client/src/pages/currencySlice.js"],"names":["createSlice","createAsyncThunk","dataAssets5Tmp","dataAssetsLogo5Tmp","dataAssets5","https","require","fetchInfoCurrency","request","fetch","method","headers","i","data","length","asset_id","push","json","currencySlice","name","initialState","state","error","currency","reducers","hydrateCurrency","action","payload","extraReducers","pending","fulfilled","rejected","message","getHomeCurrency","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\r\n//const dataAssetsTmp = [];\r\n//const dataAssetsLogoTmp = [];\r\nconst dataAssets5Tmp = [];\r\nconst dataAssetsLogo5Tmp = [];\r\nvar dataAssets5 = [];\r\nconst https = require('https');\r\n\r\nexport const fetchInfoCurrency = createAsyncThunk(\r\n\t'home/fetchCurrency',\r\n\tasync () => {\r\n//recuperer toutes les info crypto\r\n\r\n\t\tconst request = await fetch('https://rest.coinapi.io/v1/assets', {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {'X-CoinAPI-Key': 'F9065291-99B7-44B7-9F3C-4C02D0131B28'}\r\n\t\t});\r\n\t\tfor (var i = 0; i < data.length; i++) {\r\n\t\t\tif ((data[i].asset_id === 'BTC') || (data[i].asset_id === 'ETH') || (data[i].asset_id === 'USDT') || (data[i].asset_id === 'XRP') || (data[i].asset_id === 'BCH')) {\r\n\t\t\t\tdataAssets5Tmp.push(data[i]);\r\n\t\t\t}\r\n\t\t\treturn dataAssets5Tmp ;\r\n\t\t};\r\n\r\n\t\tconst data = await request.json();\r\n\r\n\t\treturn data;\r\n\r\n\r\n\t}\r\n);\r\n\r\nexport const currencySlice = createSlice({\r\n\tname: 'currency',\r\n\tinitialState: {\r\n\t\tstate: 'loading',\r\n\t\terror: null,\r\n\t\tcurrency: []\r\n\t},\r\n\treducers: {\r\n\t\thydrateCurrency: (state, action) => {\r\n\t\t\tstate.currency = action.payload\r\n\t\t},\r\n\t},\r\n\textraReducers: {\r\n\t\t[fetchInfoCurrency.pending]: (state, action) => {\r\n\t\t\tif (state.state !== 'loading') {\r\n\t\t\t\tstate.state = 'loading';\r\n\t\t\t}\r\n\t\t},\r\n\t\t[fetchInfoCurrency.fulfilled]: (state, action) => {\r\n\t\t\tif (state.state === 'loading') {\r\n\t\t\t\tstate.state = 'ready';\r\n\t\t\t\tstate.currency = action.payload;\r\n\t\t\t}\r\n\t\t},\r\n\t\t[fetchInfoCurrency.rejected]: (state, action) => {\r\n\t\t\tif (state.state === 'loading') {\r\n\t\t\t\tstate.state = 'error';\r\n\t\t\t\tstate.error = action.error.message;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n});\r\n\r\n\r\nexport const getHomeCurrency = state => state.currency.currency;\r\n\r\nexport const {hydrateCurrency} = currencySlice.actions;\r\n\r\nexport default currencySlice.reducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}